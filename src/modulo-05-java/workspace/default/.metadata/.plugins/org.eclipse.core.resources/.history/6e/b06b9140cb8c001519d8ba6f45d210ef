package br.com.cwi.crescer;

import java.util.ArrayList;
import java.util.List;

public class DoubleLinkedList<T> {

    private Node<T> first, last;

    public void addFirst(T value) {
        Node<T> novoNodo = new Node<T>(value, this.first);
        if (this.first == null) {
            this.last = novoNodo;
        } else {
            this.first.setPrevious(novoNodo);
        }
        this.first = novoNodo;
    }

    public void addLast(T value) {
        Node<T> novoNodo = new Node<T>(value, null, this.last);
        if (this.last == null) {
            this.first = novoNodo;
            this.first.setNext(this.last);
            this.last = novoNodo;
        } else {
            this.last.setNext(novoNodo);
            this.last = novoNodo;
        }
    }

    public T getFirst() {
        return this.first.getValue();
    }

    public T getLast() {
        return this.last.getValue();
    }

    public List<T> list() {
        ArrayList<T> lista = new ArrayList<>();
        Node<T> nodo = this.first;
        while (nodo != null) {
            lista.add(nodo.getValue());
            nodo = nodo.getNext();
        }
        return lista;
    }

    public void removeFirst() {
        if (first != null) {
            first = first.getNext();
        }
    }

    public void remove(int index) {
        Node<T> removido = getNode(index);
        Node<T> anterior = removido.getPrevious();
        anterior.setNext(removido.getNext());
    }

    public void add(int index, T value) {
        Node<T> novoNodo = new Node<T>(value);
        Node<T> nodo = getNode(index);
        novoNodo.setPrevious(nodo.getPrevious());
        novoNodo.setNext(nodo);
    }

    public boolean isEmpty() {
        return this.first == null;
    }

    // Metodos internos
    private Node<T> getNode(int index) {
        int i = 0;
        Node<T> nodo = first;
        while (i <= index) {
            nodo = nodo.getNext();
            i++;
        }
        return nodo;
    }

    // Classes internas
    private class Node<T> {

        private T value;

        private Node<T> next, previous;

        public Node(T value) {
            this.value = value;
        }

        public Node(T value, Node<T> next) {
            this.value = value;
            this.next = next;
        }

        public Node(T value, Node<T> next, Node<T> previous) {
            this.value = value;
            this.next = next;
            this.previous = previous;
        }

        public Node<T> getNext() {
            return this.next;
        }

        public Node<T> getPrevious() {
            return this.previous;
        }

        public T getValue() {
            return this.value;
        }

        public void setNext(Node<T> next) {
            this.next = next;
        }

        public void setPrevious(Node previous) {
            this.previous = previous;
        }
    }
}
